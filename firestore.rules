
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============== Helper Functions ==============
    function isAuthenticated() {
      return request.auth != null;
    }

    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified;
    }

    // Assumes a custom claim 'platformAdmin' is set to true for super admins
    function isPlatformAdmin() {
      return isAuthenticated() && request.auth.token.platformAdmin == true;
    }

    // Assumes a custom claim 'tenantId' is set on the user's token
    function userTenantId() {
      return request.auth.token.tenantId;
    }

    // Checks if the user belongs to the tenant specified by the tenantId argument
    function isTenantMember(tenantId) {
      return isAuthenticated() && userTenantId() == tenantId;
    }

    // Assumes a custom claim 'roles' is an array of strings on the user's token for their current tenant
    function hasTenantRole(tenantId, role) {
      return isTenantMember(tenantId) && request.auth.token.roles.hasAny([role]);
    }

    // ============== Tenant Metadata ==============
    // Path: /tenants/{tenantId}
    match /tenants/{tenantId} {
      allow read: if isTenantMember(tenantId); // Tenant members can read their own tenant's metadata
      allow create: if isPlatformAdmin(); // Only platform admins can create new tenants initially
      allow update: if isPlatformAdmin() || hasTenantRole(tenantId, 'tenant_admin'); // Platform admins or tenant admins can update
      allow delete: if isPlatformAdmin(); // Only platform admins can delete tenants
    }

    // ============== Tenant User Data ==============
    // Path: /tenants/{tenantId}/users/{userId}
    match /tenants/{tenantId}/users/{userId} {
      allow read, write: if isTenantMember(tenantId) && request.auth.uid == userId; // User can manage their own profile within their tenant
      allow read, write: if hasTenantRole(tenantId, 'tenant_admin'); // Tenant admins can manage users in their tenant
    }

    // ============== Global Component Definitions ==============
    // Path: /components/{componentId}
    match /components/{componentId} {
      allow read: if isAuthenticated(); // All authenticated users can read global component definitions
      allow create, update, delete: if isPlatformAdmin(); // Only platform admins can manage global components

      // Validate data on write
      allow write: if isPlatformAdmin()
                    && request.resource.data.id == componentId
                    && request.resource.data.type is string
                    && request.resource.data.displayName is string
                    && (!('tags' in request.resource.data) || request.resource.data.tags is list)
                    && (!('template' in request.resource.data) || request.resource.data.template is string)
                    && request.resource.data.lastModified == request.time;
      allow create: if request.resource.data.createdAt == request.time;
    }

    // ============== Platforms ==============
    // Path: /platforms/{platformId}
    match /platforms/{platformId} {
      allow read: if (resource.data.status == 'published' && resource.data.tenantId != null) // Publicly viewable if published (requires careful consideration)
                    || (isTenantMember(resource.data.tenantId)) // Tenant members can view their platforms
                    || isPlatformAdmin(); // Platform admins can view any platform

      allow create: if isAuthenticated() && request.resource.data.tenantId == userTenantId() // User creates platform for their own tenant
                    && request.resource.data.name is string
                    && request.resource.data.status is string && request.resource.data.status == 'draft'
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.lastModified == request.time;

      allow update: if (isTenantMember(resource.data.tenantId) && (hasTenantRole(resource.data.tenantId, 'platform_editor') || hasTenantRole(resource.data.tenantId, 'tenant_admin')))
                    || isPlatformAdmin()
                    // Prevent changing tenantId or createdAt
                    && !(request.resource.data.tenantId != resource.data.tenantId)
                    && !(request.resource.data.createdAt != resource.data.createdAt)
                    && request.resource.data.lastModified == request.time;

      allow delete: if (isTenantMember(resource.data.tenantId) && hasTenantRole(resource.data.tenantId, 'tenant_admin'))
                    || isPlatformAdmin();

      // --- Platform Layouts (Subcollection) ---
      // Path: /platforms/{platformId}/layouts/{layoutId}
      match /layouts/{layoutId} {
        function platformTenantId() { return get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId; }

        allow read: if isTenantMember(platformTenantId()) || isPlatformAdmin();
        allow create: if (isTenantMember(platformTenantId()) && (hasTenantRole(platformTenantId(), 'platform_editor') || hasTenantRole(platformTenantId(), 'tenant_admin')))
                       || isPlatformAdmin()
                       && request.resource.data.platformId == platformId
                       && request.resource.data.tenantId == platformTenantId()
                       && request.resource.data.name is string
                       && request.resource.data.createdAt == request.time
                       && request.resource.data.lastModified == request.time;

        allow update: if (isTenantMember(platformTenantId()) && (hasTenantRole(platformTenantId(), 'platform_editor') || hasTenantRole(platformTenantId(), 'tenant_admin')))
                       || isPlatformAdmin()
                       && !(request.resource.data.platformId != resource.data.platformId)
                       && !(request.resource.data.tenantId != resource.data.tenantId)
                       && !(request.resource.data.createdAt != resource.data.createdAt)
                       && request.resource.data.lastModified == request.time;

        allow delete: if (isTenantMember(platformTenantId()) && hasTenantRole(platformTenantId(), 'tenant_admin'))
                       || isPlatformAdmin();
      }

      // --- Platform Component Instances (Subcollection) ---
      // Path: /platforms/{platformId}/components/{instanceId}
      match /components/{instanceId} {
        function platformTenantId() { return get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId; }

        allow read: if isTenantMember(platformTenantId()) || isPlatformAdmin();
        allow create: if (isTenantMember(platformTenantId()) && (hasTenantRole(platformTenantId(), 'platform_editor') || hasTenantRole(platformTenantId(), 'tenant_admin')))
                       || isPlatformAdmin()
                       && request.resource.data.platformId == platformId
                       && request.resource.data.tenantId == platformTenantId()
                       && request.resource.data.definitionId is string
                       && request.resource.data.type is string
                       && request.resource.data.layoutId is string
                       && request.resource.data.order is number
                       && request.resource.data.createdAt == request.time
                       && request.resource.data.lastModified == request.time;

        allow update: if (isTenantMember(platformTenantId()) && (hasTenantRole(platformTenantId(), 'platform_editor') || hasTenantRole(platformTenantId(), 'tenant_admin')))
                       || isPlatformAdmin()
                       && !(request.resource.data.platformId != resource.data.platformId)
                       && !(request.resource.data.tenantId != resource.data.tenantId)
                       && !(request.resource.data.createdAt != resource.data.createdAt)
                       && !(request.resource.data.definitionId != resource.data.definitionId) // definitionId should be immutable after creation
                       && !(request.resource.data.type != resource.data.type) // type should be immutable
                       && request.resource.data.lastModified == request.time;
        allow delete: if (isTenantMember(platformTenantId()) && hasTenantRole(platformTenantId(), 'platform_editor') || hasTenantRole(platformTenantId(), 'tenant_admin'))
                       || isPlatformAdmin();
      }
    }


    // ============== FormFlow Finance - Original Rules (Needs Tenant Adaptation) ==============
    // These rules need to be adapted for multi-tenancy if forms are tenant-specific.
    // For now, they assume forms might still be user-specific or globally public.
    // To make them tenant-specific, add a tenantId field to form documents and check it.
    match /forms/{formId} {
      function isFormOwner() {
        return isEmailVerified() && resource.data.ownerId == request.auth.uid;
      }
      function canEditForm() {
        return isFormOwner() || (isEmailVerified() && exists(resource.data.permissions) && request.auth.uid in resource.data.permissions.editors);
      }
      function canViewForm() {
        return (resource.data.isPublic == true && resource.data.status == 'Published')
                || (isEmailVerified() && (canEditForm() || (exists(resource.data.permissions) && request.auth.uid in resource.data.permissions.viewers)));
      }

      allow read: if canViewForm() || isFormOwner(); // Allow owner to always read, even drafts/archived.
      allow create: if isEmailVerified()
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.title is string && request.resource.data.title.size() > 0
                    && request.resource.data.formConfiguration is string
                    && request.resource.data.intendedUseCase is string
                    && request.resource.data.status is string
                    && request.resource.data.submissionsCount is number
                    && request.resource.data.isPublic is bool // Ensure this is set
                    && request.resource.data.tags is list    // Ensure this is set
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.lastModified == request.time;
      allow update: if canEditForm()
                    && !(request.resource.data.ownerId != resource.data.ownerId)
                    && !(request.resource.data.createdAt != resource.data.createdAt)
                    && request.resource.data.isPublic is bool
                    && request.resource.data.tags is list
                    && request.resource.data.lastModified == request.time;
      allow delete: if isFormOwner();

      match /submissions/{submissionId} {
        function canSubmitToForm() {
          let form = get(/databases/$(database)/documents/forms/$(formId)).data;
          return form.status == 'Published' && (form.isPublic == true || (isEmailVerified() && (form.ownerId == request.auth.uid || (exists(form.permissions) && request.auth.uid in form.permissions.viewers))));
        }
        allow create: if isEmailVerified() && canSubmitToForm()
                      && request.resource.data.formId == formId
                      && request.resource.data.submitterId == request.auth.uid
                      && request.resource.data.submissionDate == request.time;
        allow read: if isEmailVerified() && (get(/databases/$(database)/documents/forms/$(formId)).data.ownerId == request.auth.uid || (exists(get(/databases/$(database)/documents/forms/$(formId)).data.permissions) && request.auth.uid in get(/databases/$(database)/documents/forms/$(formId)).data.permissions.editors));
        allow update, delete: if false;
      }
    }

    // Submissions collection (if forms are not tenant-specific or have a global submissions pool)
    // If adapting forms to be tenant-specific, submissions should likely be under /tenants/{tenantId}/forms/{formId}/submissions
    match /submissions/{submissionId} {
      allow read: if isEmailVerified(); // Example: allow authenticated users to read submissions - NEEDS REFINEMENT based on form ownership
      allow create: if isEmailVerified(); // Example: allow authenticated users to create submissions - NEEDS REFINEMENT
    }
  }
}

    