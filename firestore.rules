
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isPlatformGlobalAdmin() {
      return isAuthenticated() && request.auth.token.platformAdmin == true;
    }

    function isTenantMember(tenantId) {
      return isAuthenticated() && request.auth.token.tenantId == tenantId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && request.auth.token.roles.hasAny([role]);
    }

    function isTenantAdmin(tenantId) {
      return isTenantMember(tenantId) && hasRole('tenant_admin');
    }

    // Forms Collection
    // Forms are owned by individual users.
    match /forms/{formId} {
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow read, update, delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      
      // Allow public read if form is published and explicitly marked public
      allow get: if resource.data.status == 'Published' && resource.data.isPublic == true;
      // Allow authenticated users to list forms (client-side should filter by ownerId or public status)
      allow list: if isAuthenticated();
    }

    // Submissions Collection
    // Submissions are tied to a specific form.
    match /submissions/{submissionId} {
      allow create: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(request.resource.data.formId)).data.status == 'Published';
      allow read, update, delete: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.ownerId == request.auth.uid;
      // Allow form owners to list submissions for their forms (client-side must filter by formId)
      allow list: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(request.query.filters[0][2])).data.ownerId == request.auth.uid;
    }

    // Global Components Definitions
    // These are templates managed by platform administrators.
    match /components/{componentDefId} {
      allow get, list: if isAuthenticated(); // All authenticated users can read definitions for palette
      allow write: if isPlatformGlobalAdmin(); // create, update, delete only by platform admins
    }

    // Platforms Collection
    // Platforms are owned by tenants.
    match /platforms/{platformId} {
      allow get: if resource.data.status == 'published' 
                  || isTenantMember(resource.data.tenantId) 
                  || isPlatformGlobalAdmin();
      allow list: if isAuthenticated(); // Client-side will filter by tenantId or for public discovery
      
      allow create: if isAuthenticated() && request.resource.data.tenantId == request.auth.token.tenantId;
      allow update: if isTenantAdmin(resource.data.tenantId) 
                      || (isAuthenticated() && resource.data.platformAdmins.hasAny([request.auth.uid]))
                      || isPlatformGlobalAdmin();
      allow delete: if isTenantAdmin(resource.data.tenantId) || isPlatformGlobalAdmin();

      // Layouts subcollection (within a platform)
      match /layouts/{layoutId} {
        allow get: if get(/databases/$(database)/documents/platforms/$(platformId)).data.status == 'published'
                    || isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId)
                    || isPlatformGlobalAdmin();
        allow list: if isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId)
                      || isPlatformGlobalAdmin();
        allow create: if (isTenantAdmin(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) 
                          || (isAuthenticated() && get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins.hasAny([request.auth.uid])))
                      && request.resource.data.tenantId == get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId
                      && request.resource.data.platformId == platformId;
        allow update, delete: if isTenantAdmin(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) 
                                || (isAuthenticated() && get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins.hasAny([request.auth.uid]))
                                || isPlatformGlobalAdmin();
      }

      // Component Instances subcollection (within a platform, linked to a layout)
      match /components/{instanceId} {
         allow get: if get(/databases/$(database)/documents/platforms/$(platformId)).data.status == 'published'
                    || isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId)
                    || isPlatformGlobalAdmin();
        allow list: if isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId)
                      || isPlatformGlobalAdmin(); // Client must filter by layoutId
        allow create: if (isTenantAdmin(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) 
                          || (isAuthenticated() && get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins.hasAny([request.auth.uid])))
                      && request.resource.data.tenantId == get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId
                      && request.resource.data.platformId == platformId;
        allow update, delete: if isTenantAdmin(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) 
                                || (isAuthenticated() && get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins.hasAny([request.auth.uid]))
                                || isPlatformGlobalAdmin();
      }
    }

    // Tenants Collection
    // Holds metadata about each tenant.
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
      allow list: if isPlatformGlobalAdmin(); // Only global admins can list all tenants
      allow create: if isPlatformGlobalAdmin(); // Or through a specific tenant creation function
      allow update: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      allow delete: if isPlatformGlobalAdmin(); // Deleting tenants is typically an admin-only action

      // Users subcollection within a tenant
      match /users/{userId} {
        allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
        allow list: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
        allow create: if (isTenantAdmin(tenantId) || isPlatformGlobalAdmin()) && request.resource.data.id == userId;
        allow update: if (isTenantAdmin(tenantId) && request.auth.uid == userId) // User can update their own profile
                          || isTenantAdmin(tenantId) // Tenant admin can update any user in their tenant
                          || isPlatformGlobalAdmin();
        allow delete: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      }
    }
  }
}
