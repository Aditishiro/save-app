
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User profiles: users can read/write their own profile.
    // Allow admins to read any profile (requires admin custom claim or role check).
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Example for admin read:
      // allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists);
    }

    // Forms:
    // - ownerId: uid of the user who created the form.
    // - permissions: map for roles like { viewers: [uid1, uid2], editors: [uid1, uid3] }
    // - isPublic: boolean for public read access
    match /forms/{formId} {
      function isOwner() {
        return request.auth != null && resource.data.ownerId == request.auth.uid;
      }

      // Check if the user has an editor role for the form
      function isEditor() {
        return request.auth != null &&
               exists(resource.data.permissions) &&
               request.auth.uid in resource.data.permissions.editors;
      }

      // Check if the user has a viewer role for the form
      function isViewer() {
        return request.auth != null &&
               exists(resource.data.permissions) &&
               request.auth.uid in resource.data.permissions.viewers;
      }

      // Function to check if the form is public
      function isPublicForm() {
        return exists(resource.data.isPublic) && resource.data.isPublic == true;
      }

      // Allow read if user is owner, editor, viewer, or if the form is public.
      // Ensure email is verified for accessing non-public forms.
      allow read: if request.auth != null &&
                     (
                       isOwner() ||
                       isEditor() ||
                       isViewer() ||
                       isPublicForm()
                     ) &&
                     (isPublicForm() || request.auth.token.email_verified == true);


      // Allow create if user is authenticated and email is verified.
      // Ensure required fields are present and ownerId matches the authenticated user.
      // Enforce server timestamps for createdAt and lastModified.
      allow create: if request.auth != null && request.auth.token.email_verified == true
                    && request.resource.data.ownerId == request.auth.uid
                    && 'title' in request.resource.data
                    && 'formConfiguration' in request.resource.data
                    && 'intendedUseCase' in request.resource.data
                    && 'lastModified' in request.resource.data && request.resource.data.lastModified == request.time
                    && 'createdAt' in request.resource.data && request.resource.data.createdAt == request.time
                    && 'status' in request.resource.data // e.g., 'Draft'
                    && 'submissions' in request.resource.data && request.resource.data.submissions == 0;


      // Allow update if user is owner or editor and email is verified.
      // Prevent changing ownerId or createdAt.
      // Enforce server timestamp for lastModified.
      allow update: if request.auth != null && request.auth.token.email_verified == true && (isOwner() || isEditor())
                    && !(request.resource.data.ownerId != resource.data.ownerId)
                    && !(request.resource.data.createdAt != resource.data.createdAt)
                    && 'lastModified' in request.resource.data && request.resource.data.lastModified == request.time;


      // Allow delete only if user is the owner and email is verified.
      allow delete: if request.auth != null && request.auth.token.email_verified == true && isOwner();


      // Submissions for a form
      match /submissions/{submissionId} {
        // Allow anyone authenticated (and email verified) to submit if the form is public
        // OR if they are the owner, editor, or viewer of the form (for private forms).
        function canSubmitToForm() {
          let formDoc = get(/databases/$(database)/documents/forms/$(formId));
          return request.auth != null && request.auth.token.email_verified == true &&
                 (
                   (exists(formDoc.data.isPublic) && formDoc.data.isPublic == true) ||
                   (formDoc.data.ownerId == request.auth.uid) ||
                   (exists(formDoc.data.permissions) && request.auth.uid in formDoc.data.permissions.editors) ||
                   (exists(formDoc.data.permissions) && request.auth.uid in formDoc.data.permissions.viewers)
                 );
        }

        allow create: if canSubmitToForm()
                      // Ensure submitterId is set to the authenticated user's UID
                      && 'submitterId' in request.resource.data && request.resource.data.submitterId == request.auth.uid
                      && 'submissionDate' in request.resource.data && request.resource.data.submissionDate == request.time
                      && 'formData' in request.resource.data; // The actual submitted data

        // Form owner or editor can read/list submissions.
        // Optionally, allow submitter to read their own submission.
        function canReadSubmissions() {
           let formDoc = get(/databases/$(database)/documents/forms/$(formId));
           return request.auth != null && request.auth.token.email_verified == true &&
                  (
                    (formDoc.data.ownerId == request.auth.uid) ||
                    (exists(formDoc.data.permissions) && request.auth.uid in formDoc.data.permissions.editors)
                    // Uncomment to allow submitters to read their own:
                    // || (resource.data.submitterId == request.auth.uid)
                  );
        }
        allow read: if canReadSubmissions();

        // Submissions should generally be immutable by users after creation.
        // Admins/owners might delete through backend functions.
        allow update, delete: if false;
      }
    }

    // Optional: Admin role collection if you plan to use it.
    // match /admins/{adminId} {
    //   allow read: if request.auth != null && request.auth.uid == adminId;
    //   // Creating/deleting admins should be a privileged operation, likely via Firebase Functions.
    // }
  }
}
