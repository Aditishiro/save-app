
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check for global platform admin custom claim
    function isPlatformGlobalAdmin() {
      return isAuthenticated() && request.auth.token.platformAdmin == true;
    }

    // Check if the authenticated user belongs to a specific tenant
    function isTenantMember(tenantId) {
      return isAuthenticated() && request.auth.token.tenantId == tenantId;
    }

    // Check if the authenticated user is an admin for a specific tenant
    function isTenantAdmin(tenantId) {
      return isTenantMember(tenantId) && request.auth.token.roles.hasAny(['tenant_admin']);
    }

    // Check if the user can read a specific platform
    function canReadPlatform(platformId) {
      let platform = get(/databases/$(database)/documents/platforms/$(platformId)).data;
      return platform.status == 'published' ||
             (isAuthenticated() && isTenantMember(platform.tenantId)) ||
             isPlatformGlobalAdmin();
    }

    // Check if the user can write to a specific platform (simplified, expand as needed)
    function canWritePlatform(platformId) {
      let platform = get(/databases/$(database)/documents/platforms/$(platformId)).data;
      return (isAuthenticated() &&
              (isTenantAdmin(platform.tenantId) || (platform.platformAdmins != null && request.auth.uid in platform.platformAdmins))) ||
             isPlatformGlobalAdmin();
    }
    
    // Forms: Owned by individual users
    match /forms/{formId} {
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isUser(resource.data.ownerId) || 
                     (resource.data.status == 'Published' && resource.data.isPublic == true);
      allow update, delete: if isUser(resource.data.ownerId);
      allow list: if isAuthenticated(); // Client must filter by ownerId or public status for non-owned forms
    }

    // Submissions: Tied to forms
    match /submissions/{submissionId} {
      function getFormData() {
        return get(/databases/$(database)/documents/forms/$(request.resource.data.formId)).data;
      }
      function getExistingFormData() {
         return get(/databases/$(database)/documents/forms/$(resource.data.formId)).data;
      }

      allow create: if isAuthenticated() && getFormData().status == 'Published';
      // Only form owner can read/update/delete submissions
      allow read, update, delete: if isAuthenticated() && isUser(getExistingFormData().ownerId);
      allow list: if isAuthenticated(); // Client must filter based on form ownership
    }

    // Global Components: Readable by authenticated users, writable by platform admins
    match /components/{componentDefId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isPlatformGlobalAdmin();
    }

    // Platform Definitions: Tied to tenants
    match /platforms/{platformId} {
      allow get: if canReadPlatform(platformId);
      allow list: if isAuthenticated(); // Client must filter by tenantId or other criteria

      // Tenant members can create platforms for their own tenantId
      allow create: if isAuthenticated() && 
                       request.resource.data.tenantId == request.auth.token.tenantId &&
                       isTenantMember(request.resource.data.tenantId);
      
      // Only tenant admins (of that specific tenant) or platform admins (listed in platformAdmins field) or global admins can update/delete
      allow update, delete: if (isAuthenticated() && 
                                (isTenantAdmin(resource.data.tenantId) || 
                                 (resource.data.platformAdmins != null && request.auth.uid in resource.data.platformAdmins)
                                )) || 
                               isPlatformGlobalAdmin();

      // Layouts within a platform
      match /layouts/{layoutId} {
        allow get, list: if canReadPlatform(platformId);
        allow create, update, delete: if canWritePlatform(platformId);
      }

      // Component Instances within a platform's layout
      match /components/{instanceId} { // This is /platforms/{platformId}/components/{instanceId}
        allow get, list: if canReadPlatform(platformId);
        allow create, update, delete: if canWritePlatform(platformId);
      }
    }

    // Tenant Metadata: Restricted access
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
      allow list: if isPlatformGlobalAdmin(); // Listing all tenants might be admin-only
      allow create: if isPlatformGlobalAdmin(); // Or specific provisioning logic
      allow update: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      // Delete might be restricted or handled by cleanup functions
      allow delete: if isPlatformGlobalAdmin();

      // Users within a tenant
      match /users/{userId} {
        allow get: if isUser(userId) && isTenantMember(tenantId) || 
                      isTenantAdmin(tenantId) || 
                      isPlatformGlobalAdmin();
        allow list: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
        allow create: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin(); // Tenant admin can add users
        allow update: if isUser(userId) || isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
        allow delete: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      }
    }
  }
}

    