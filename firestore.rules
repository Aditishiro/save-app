
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Platform Global Admin: Can manage global components, etc.
    function isPlatformGlobalAdmin() {
      return isAuthenticated() && request.auth.token.platformAdmin == true;
    }

    // Tenant Member: Belongs to a specific tenant
    function isTenantMember(tenantId) {
      return isAuthenticated() && request.auth.token.tenantId == tenantId;
    }

    // Tenant Admin: Has admin rights within their tenant
    function isTenantAdmin(tenantId) {
      // Assumes 'roles' is an array in custom claims, e.g., ['tenant_admin', 'editor']
      return isTenantMember(tenantId) && request.auth.token.roles.hasAny(['tenant_admin']);
    }

    // --- FORMS & SUBMISSIONS ---

    // Forms: Owned by individual users
    match /forms/{formId} {
      // Owner can do anything to their own form
      allow read, update, delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      // Any authenticated user can create a form (ownerId must be their own UID)
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      // Public read for published forms that are marked as public
      allow get: if resource.data.status == 'Published' && resource.data.isPublic == true;
      // Authenticated users can list their own forms (client query must include where('ownerId', '==', uid))
      allow list: if isAuthenticated();
    }

    // Submissions: Linked to forms
    match /submissions/{submissionId} {
      // Allow anyone to create a submission if the target form is published
      // More secure would be to check form's 'isPublic' status if creating anonymously
      allow create: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(request.resource.data.formId)).data.status == 'Published';
      // Owner of the form can read, update, or delete submissions to their form
      allow read, update, delete: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.ownerId == request.auth.uid;
       // Form owner can list submissions for their form (client query must include where('formId', '==', formId))
      allow list: if isAuthenticated() && request.query.formId != null && get(/databases/$(database)/documents/forms/$(request.query.formId)).data.ownerId == request.auth.uid;
    }

    // --- PLATFORM BUILDER ---

    // Global Components: Templates for platform building
    match /components/{componentDefId} {
      // Any authenticated user can read/list global components (for the palette)
      allow get, list: if isAuthenticated();
      // Only platform global admins can create, update, or delete global component definitions
      allow write: if isPlatformGlobalAdmin();
    }

    // Platforms: Tenant-specific applications
    match /platforms/{platformId} {
      function platformData() { return resource.data; }
      function incomingPlatformData() { return request.resource.data; }

      // Public can view published platforms
      allow get: if platformData().status == 'published';
      // Tenant members can view their own platforms (draft or published)
      allow get: if isTenantMember(platformData().tenantId);
      // Platform global admins can view any platform
      allow get: if isPlatformGlobalAdmin();

      // Authenticated users can list platforms; client must filter by tenantId or other criteria.
      // The 'get' rules above will enforce individual document access.
      allow list: if isAuthenticated();

      // Tenant admins or users listed as platformAdmins can update their tenant's platform
      allow update: if isTenantMember(platformData().tenantId) &&
                       (isTenantAdmin(platformData().tenantId) || request.auth.uid in platformData().platformAdmins);
      // Users can create platforms for their own tenant, setting themselves as tenantId
      allow create: if isAuthenticated() && incomingPlatformData().tenantId == request.auth.token.tenantId;
      // Tenant admins or specific platformAdmins can delete
      allow delete: if isTenantMember(platformData().tenantId) &&
                       (isTenantAdmin(platformData().tenantId) || request.auth.uid in platformData().platformAdmins);

      // Layouts subcollection within a platform
      match /layouts/{layoutId} {
        function parentPlatform() { return get(/databases/$(database)/documents/platforms/$(platformId)).data; }

        // Public read if parent platform is published
        allow get: if parentPlatform().status == 'published';
        // Tenant members can read/list layouts of their platforms
        allow get, list: if isTenantMember(parentPlatform().tenantId);
        // Write access for tenant admins or platform admins of the parent platform
        allow write: if isTenantMember(parentPlatform().tenantId) &&
                        (isTenantAdmin(parentPlatform().tenantId) || request.auth.uid in parentPlatform().platformAdmins);
      }

      // Component Instances subcollection within a platform
      match /components/{instanceId} {
        function parentPlatform() { return get(/databases/$(database)/documents/platforms/$(platformId)).data; }

        // Public read if parent platform is published
        allow get: if parentPlatform().status == 'published';
        // Tenant members can read/list components of their platforms
        allow get, list: if isTenantMember(parentPlatform().tenantId);
        // Write access for tenant admins or platform admins of the parent platform
        allow write: if isTenantMember(parentPlatform().tenantId) &&
                        (isTenantAdmin(parentPlatform().tenantId) || request.auth.uid in parentPlatform().platformAdmins);
      }
    }

    // --- TENANCY (Optional, if you have explicit tenant management) ---

    // Tenant Metadata (basic example)
    match /tenants/{tenantId} {
      // Tenant members can read their own tenant's metadata. Global admins can read any.
      allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
      // Tenant admins can update their tenant's metadata. Global admins can update any.
      allow update: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      // Creating tenants might be restricted to global admins or a specific backend process.
      allow create: if isPlatformGlobalAdmin();
    }

    // User profiles within a tenant
    match /tenants/{tenantId}/users/{userId} {
      // User can read/update their own profile. Tenant admins can manage users in their tenant. Global admins too.
      allow get: if isUser(userId) || isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      allow update: if isUser(userId) || isTenantAdmin(tenantId);
      // Creating users might be part of an invite system or tenant admin action.
      allow create: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      allow list: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin(); // List users within a tenant
    }
  }
}

    