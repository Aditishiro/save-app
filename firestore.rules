
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isPlatformGlobalAdmin() {
      return isAuthenticated() && request.auth.token.platformAdmin == true;
    }

    // Tenant-specific helper functions
    function isTenantMember(tenantId) {
      return isAuthenticated() && request.auth.token.tenantId == tenantId;
    }

    function isTenantAdmin(tenantId) {
      // Assumes 'roles' is an array in custom claims, e.g., request.auth.token.roles = ['tenant_admin']
      return isTenantMember(tenantId) && request.auth.token.roles.hasAny(['tenant_admin', 'admin']);
    }

    // Forms Collection: /forms/{formId}
    match /forms/{formId} {
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow read, update, delete: if isUser(resource.data.ownerId) || isPlatformGlobalAdmin();
      
      // Allow public read of published forms if they are marked as public
      allow get: if resource.data.status == 'Published' && resource.data.isPublic == true;
      
      // List might be broad, client queries should filter by ownerId or other criteria
      // For this example, allow authenticated users to list, expecting client-side filtering.
      // Or, if forms are public, allow list: if true;
      allow list: if isAuthenticated(); 
    }

    // Submissions Collection: /submissions/{submissionId}
    // Assumes submissions are global for simplicity here. Could be subcollections of forms.
    match /submissions/{submissionId} {
      // Anyone can create a submission if the target form is published.
      // This requires reading the form document.
      allow create: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(request.resource.data.formId)).data.status == 'Published';
      
      // Only the form owner can read/update/delete submissions for their form
      allow read, update, delete: if isAuthenticated() && (isUser(get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.ownerId) || isPlatformGlobalAdmin());
      
      // Listing submissions might be restricted to form owners on client-side queries
      allow list: if isAuthenticated(); // Client must filter by formId where owner is current user
    }

    // Global Components Definitions: /components/{componentDefId}
    match /components/{componentDefId} {
      allow get, list: if isAuthenticated(); // Palette population, etc.
      allow create, update, delete: if isPlatformGlobalAdmin(); // Only global admins
    }

    // Platforms Collection: /platforms/{platformId}
    // This is a top-level collection for all platforms.
    match /platforms/{platformId} {
      allow get: if (resource.data.status == 'published') || 
                     (isAuthenticated() && isTenantMember(resource.data.tenantId)) || 
                     isPlatformGlobalAdmin();
      
      // Allow authenticated users to list platforms; client should filter by tenantId
      allow list: if isAuthenticated(); 

      // User can create a platform for their own tenantId
      allow create: if isAuthenticated() && request.resource.data.tenantId == request.auth.token.tenantId;
      
      // Allow update/delete by tenant admins of that platform's tenant, 
      // or by users listed in platformAdmins array, or by global admin
      allow update, delete: if isAuthenticated() && 
                              (isTenantAdmin(resource.data.tenantId) || 
                               (resource.data.platformAdmins != null && request.auth.uid in resource.data.platformAdmins) || 
                               isPlatformGlobalAdmin());

      // Subcollection: Layouts within a Platform
      // /platforms/{platformId}/layouts/{layoutId}
      match /layouts/{layoutId} {
        allow get: if (get(/databases/$(database)/documents/platforms/$(platformId)).data.status == 'published') ||
                      (isAuthenticated() && isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId)) ||
                      isPlatformGlobalAdmin();
        allow list: if isAuthenticated() && isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) || isPlatformGlobalAdmin();
        allow create, update, delete: if isAuthenticated() && 
                                    (isTenantAdmin(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) ||
                                     (get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins != null && request.auth.uid in get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins) || 
                                     isPlatformGlobalAdmin());
      }

      // Subcollection: Component Instances within a Platform
      // /platforms/{platformId}/components/{componentInstanceId}
      match /components/{instanceId} {
         allow get: if (get(/databases/$(database)/documents/platforms/$(platformId)).data.status == 'published') ||
                       (isAuthenticated() && isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId)) ||
                       isPlatformGlobalAdmin();
        allow list: if isAuthenticated() && isTenantMember(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) || isPlatformGlobalAdmin();
        
        // Check tenant admin of parent platform, or specific platform admin, or global admin
        allow create, update, delete: if isAuthenticated() && 
                                    (isTenantAdmin(get(/databases/$(database)/documents/platforms/$(platformId)).data.tenantId) || 
                                     (get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins != null && request.auth.uid in get(/databases/$(database)/documents/platforms/$(platformId)).data.platformAdmins) || 
                                     isPlatformGlobalAdmin());
      }
    }
    
    // Tenant Metadata Collection: /tenants/{tenantId}
    match /tenants/{tenantId} {
        allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
        allow list: if isPlatformGlobalAdmin(); // Only global admins can list all tenants
        allow create: if isPlatformGlobalAdmin(); // Or during user signup if tenantId is user's UID initially
        allow update: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
        
        // Subcollection: Users within a Tenant
        // /tenants/{tenantId}/users/{userId}
        match /users/{userId} {
            allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
            allow list: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
            allow create, update: if (isUser(userId) && isTenantMember(tenantId)) || isTenantAdmin(tenantId) || isPlatformGlobalAdmin(); // User can update their own profile, or tenant/global admin can
            allow delete: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
        }
    }

  }
}
