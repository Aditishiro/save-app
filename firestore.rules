
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isPlatformGlobalAdmin() {
      return isAuthenticated() && request.auth.token.platformAdmin == true;
    }

    function isTenantMember(tenantId) {
      return isAuthenticated() && request.auth.token.tenantId == tenantId;
    }

    // Assumes a 'roles' array in custom claims, e.g., request.auth.token.roles = ['tenant_admin']
    function isTenantAdmin(tenantId) {
      return isTenantMember(tenantId) && request.auth.token.roles.hasAny(['tenant_admin']);
    }

    // Forms: Owned by individual users
    match /forms/{formId} {
      allow create: if isAuthenticated()
                    && request.resource.data.ownerId == request.auth.uid;
      allow get: if (resource.data.status == 'Published' && resource.data.isPublic == true)
                  || (isAuthenticated() && resource.data.ownerId == request.auth.uid)
                  || isPlatformGlobalAdmin(); // Platform admin can read any form for moderation/support
      allow list: if isAuthenticated(); // Client-side queries must filter by ownerId or public status
      allow update: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // Submissions: Linked to forms, readable by form owner
    match /submissions/{submissionId} {
      allow create: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(request.resource.data.formId)).data.status == 'Published';
      allow read, update, delete: if isAuthenticated() && get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.ownerId == request.auth.uid;
      allow list: if isAuthenticated(); // Client-side queries must filter by formId and check form ownership
    }

    // Global Components: Readable by all authenticated, writable by platform admins
    match /components/{componentDefId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isPlatformGlobalAdmin();
    }

    // Platforms: Owned by tenants, editable by tenant admins or designated platform admins
    match /platforms/{platformId} {
      allow get: if (resource.data.status == 'published') // Published platforms are publicly viewable
                  || (isAuthenticated() && isTenantMember(resource.data.tenantId))
                  || isPlatformGlobalAdmin();
      allow list: if isAuthenticated(); // Client must filter by tenantId or public status

      allow create: if isAuthenticated()
                    && request.resource.data.tenantId == request.auth.token.tenantId; // User can create platform for their own tenant
      allow update: if isAuthenticated() &&
                       (isTenantAdmin(resource.data.tenantId) || (resource.data.platformAdmins != null && resource.data.platformAdmins.hasAny([request.auth.uid])))
                    || isPlatformGlobalAdmin(); // Tenant admins or designated platform admins can update
      allow delete: if isAuthenticated() &&
                       (isTenantAdmin(resource.data.tenantId)) // Only tenant admins can delete
                    || isPlatformGlobalAdmin();

      // Layouts within a platform
      match /layouts/{layoutId} {
        allow get: if parentDocData("platforms", platformId).status == 'published'
                    || (isAuthenticated() && isTenantMember(parentDocData("platforms", platformId).tenantId))
                    || isPlatformGlobalAdmin();
        allow list: if isAuthenticated() && isTenantMember(parentDocData("platforms", platformId).tenantId)
                     || isPlatformGlobalAdmin();
        allow create: if isAuthenticated() && isTenantAdmin(parentDocData("platforms", platformId).tenantId)
                       || isPlatformGlobalAdmin();
        allow update, delete: if isAuthenticated() && isTenantAdmin(parentDocData("platforms", platformId).tenantId)
                               || isPlatformGlobalAdmin();
      }

      // Component Instances within a platform's layout
      match /components/{instanceId} {
        allow get: if parentDocData("platforms", platformId).status == 'published'
                    || (isAuthenticated() && isTenantMember(parentDocData("platforms", platformId).tenantId))
                    || isPlatformGlobalAdmin();
        allow list: if isAuthenticated() && isTenantMember(parentDocData("platforms", platformId).tenantId)
                     || isPlatformGlobalAdmin();
        allow create: if isAuthenticated() &&
                         (isTenantAdmin(parentDocData("platforms", platformId).tenantId) || (parentDocData("platforms", platformId).platformAdmins != null && parentDocData("platforms", platformId).platformAdmins.hasAny([request.auth.uid])))
                      || isPlatformGlobalAdmin();
        allow update, delete: if isAuthenticated() &&
                                 (isTenantAdmin(parentDocData("platforms", platformId).tenantId) || (parentDocData("platforms", platformId).platformAdmins != null && parentDocData("platforms", platformId).platformAdmins.hasAny([request.auth.uid])))
                              || isPlatformGlobalAdmin();
      }
    }

    // Tenant Metadata
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
      allow list: if isPlatformGlobalAdmin(); // Only platform admins can list all tenants
      allow create: if isPlatformGlobalAdmin(); // Or a specific trusted function for self-service tenant creation
      allow update: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      // Delete might be restricted to platform admin only
      allow delete: if isPlatformGlobalAdmin();

      // User profiles within a tenant
      match /users/{userId} {
        allow get: if isTenantMember(tenantId) || isPlatformGlobalAdmin();
        allow list: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
        allow create: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin(); // Tenant admin can add users
        allow update: if (isUser(userId) && isTenantMember(tenantId)) // User can update their own profile
                       || isTenantAdmin(tenantId)
                       || isPlatformGlobalAdmin();
        allow delete: if isTenantAdmin(tenantId) || isPlatformGlobalAdmin();
      }
    }

    // Helper function to get parent document data
    function parentDocData(collectionName, docId) {
      return get(/databases/$(database)/documents/$(collectionName)/$(docId)).data;
    }
  }
}

    